■概念として理解すること（後でちゃんとまとめる）

・prototypeについて
　⇒基本はjavaの継承と同じようなだと思えばいい
　⇒すべてのオブジェクトはObjectオブジェクトを継承する
　⇒プロトタイプチェーン
　　⇒要は継承関係で親の関数を呼ぶときは、
　　child extend Parentみたいな関係の時メソッドを呼ぶと、以下の順番で探して最初に見つかったものを実行する。
　　①child.method()
　　②child.prototype.method() ※つまりParent.method()
　　③Parent.prototype.method() ※つまりObject.method()

・Globalオブジェクトについて
  javascriptがグローバルスコープ（どこからでも参照可能）で持っている組み込みの特殊なオブジェクト
  つまりこれ（https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference#%E9%96%A2%E6%95%B0%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3）
　以下のようにはできない
　×　Global.method()
　×　Global.property
　以下のようにする
　〇　method()
　
・イベントバブリングについて
　要は、イベントが発生したときに
　①window→document→html→body→div→button→...みたいに探索して
　②イベントが発生したDom（例としてbutton)があると
　③buttonのonclick→divのonclick、の順でバブリングしながらイベントが発火する
　
　
・javascriptのインテリセンスと、コールバックの引数について
　結局覚えるしかない？何かうまいやり方はないの？
　⇒しっくりきたのがこれ（https://qiita.com/toryuneko/items/c023031b61886cae2a99）
　　⇒静的型付け言語はコード自体が設計書になる（実行前に渡せる値等を制御できるので）
　　⇒動的型付け言語はコード自体が設計書にならない（実行しないと分からない）
　　　
　　　　⇒歴史的な名残でweb系では動的型付け言語が使われてるだけなのでそんな深く考えないほうがいいかも
　　　　⇒「ダックタイピング」の考え方をちゃんと理解すれば納得できるかも（ダックタイピングは概念的にはjavaのinterface的なやつ）
　
　・ECMAスクリプトとかjavascriptエコシステムの包括的な説明。わかりやすい
　https://typescriptbook.jp/overview/ecmascript
　
　これは歴史とか　読み物としておもしろい
　https://typescriptbook.jp/overview/before-typescript
　
　
　動的言語のメリット：ダックタイピング（アヒルのように歩き、鳴くのであれば、それはアヒルだ）について（ほんのりとメリットが理解できるかも
　https://qiita.com/shimgo/items/9d9fbab1e3a7c4343f7b
　⇒自分なりの理解としてはダックタイピングは
　　・メソッドの作成者は、引数のオブジェクト（クラス）はこういうメソッドを持っているはず、という前提で作成する⇒実際使われたときに持ってれば呼ばれるしなければ無視される。
　　　⇒要はインターフェースは定義しないが、こういうインターフェースだろう、と予測してプログラミングするスタイル
　　・引数に渡すオブジェクトは「こういうプロパティとこういうメソッドを持っているべき」という前提で渡す。
　　　⇒要は、そのオブジェクトが「正しく」設計されているのであれば、持っているプロパティやメソッドはインターフェースを定義しなくてもおのずと分るでしょ？ってこと。
　　　　※とはいえ名前の付け方はいろいろあるので、抽象的にどんなメソッドをもっているか予想はできても、それの命名は結局内部の実装見ないとわかんないね、と・・(英語には同音異義語とかない？）

　　これとかもわかりやすいかもね　　　　
　　https://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q1146611996　　> ＡはdoSomthingが出来る、というJavaと、
doSomthingが出来るのはAだ、というダックタイピングの考え方は、
どちらも間違いではありません。
どちらもインタフェース指向として正しいと思います。
   > ダックタイピング：クラス型が違えど同じメソッドを持っていれば同様に処理する
　
　一部、ん？って思うこともあるが、静的言語のメリットをいろいろまとめてくれてる
　https://perlzemi.com/blog/20130227136192.html
　https://koduki.hatenablog.com/entry/2013/03/02/163754
　
　
　⇒そもそもの前提として!!
　　・動的言語と静的言語はトレードオフ。静的言語ではインテリセンスは完全には機能しない（https://xtech.nikkei.com/it/article/COLUMN/20060315/232519/）
　　・動的言語は実行時までどうなるか分からない
　　　⇒つまり手法としてプログラム作成時点で完璧を求めるのではなく、トライ＆エラーで作っていく、というのが普通
　　　　⇒これについてはTDD(Test Driven)で解決できる。テストが通らなければコミットできない、というのは事前にエラーをつぶせるのと同議
　　・他人が書いた動的言語は読みづらい。なぜならその書いた人間の意図に依存しすぎるため
　　
　　ということを理解したうえで、動的言語とは考え方が根本的に違うことを認めて勉強するのが良い
　　動的言語では、静的言語のような事前エラー検知や、型によるインテリセンスはできない。
　　⇒TODO:ではそのうえで、vscodeのjavascriptインテリセンスはどうなっているのか？を理解したい。
　　https://code.visualstudio.com/docs/languages/javascript#_intellisense
　　標準でこれベース：https://jsdoc.app/
　　　⇒いろいろ走査するのではなく、jsdocに書かれていることを表示しているだけっぽい？
　　VSCODEは独自に定義を持ってるっぽいね。.tsファイルで
　　例えば、Array().foreach ←こいつの定義に移動するとlib.es5.d.tsが出てきて、インテリセンスではそこのjsdocとかを表示してくれてる。（あれ、でもこれnode_moduleのなかのファイルだな・・素のjsの場合は？
　　　⇒このnode_moduleは
　　　"C:\Users\nogam\AppData\Local\Programs\Microsoft VS Code\resources\app\extensions\node_modules\typescript\lib\lib.es5.d.ts"
　　　このパスなので、vscode自体が提供してる機能だ
　　　
　　
　
　実際に作ったもので、動的な方がいいなーと思ったものは
　CTCでAPIテスト用アプリを作った時に
　webでフォームから受け取った値でAPIクライアントを呼び出すときに、型推論を使った（キャストしてAPIクライアントに渡す）
　（とはいえ型推論なので、コンパイル時には型が決まるが）
　　⇒アプリの中である時点では型は決まっていないが、コンパイル時点では型が決まるのがいいかもとは思った。
　　
　　⇒この辺もいいかも？　javascriptはアドホック多相のポリモーフィズムをもつ
　　https://ja.wikipedia.org/wiki/%E3%83%9D%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%95%E3%82%A3%E3%82%BA%E3%83%A0
　　　
　
　
　・その他
　　その画面で使われてるファイルはなんなの？⇒Devtoolのネットワークでダウンロードされたファイルを見ればいいか
　
　


CJSとは？
⇒　common.js
仕様(ECMAScript)
